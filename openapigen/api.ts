/* tslint:disable */
/* eslint-disable */
/**
 * Conovel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Sentence
 */
export interface Sentence {
    /**
     * 
     * @type {number}
     * @memberof Sentence
     */
    'sentence_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Sentence
     */
    'sentence'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sentence
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sentence
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ViewSentence
 */
export interface ViewSentence {
    /**
     * 
     * @type {Sentence}
     * @memberof ViewSentence
     */
    'main'?: Sentence;
}

/**
 * SentencesApi - axios parameter creator
 * @export
 */
export const SentencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a sentence by ID
         * @param {number} sentenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceById: async (sentenceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sentenceId' is not null or undefined
            assertParamExists('getSentenceById', 'sentenceId', sentenceId)
            const localVarPath = `/sentences/{sentence_id}`
                .replace(`{${"sentence_id"}}`, encodeURIComponent(String(sentenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SentencesApi - functional programming interface
 * @export
 */
export const SentencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SentencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a sentence by ID
         * @param {number} sentenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentenceById(sentenceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewSentence>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSentenceById(sentenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SentencesApi.getSentenceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SentencesApi - factory interface
 * @export
 */
export const SentencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SentencesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a sentence by ID
         * @param {number} sentenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceById(sentenceId: number, options?: RawAxiosRequestConfig): AxiosPromise<ViewSentence> {
            return localVarFp.getSentenceById(sentenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SentencesApi - object-oriented interface
 * @export
 * @class SentencesApi
 * @extends {BaseAPI}
 */
export class SentencesApi extends BaseAPI {
    /**
     * 
     * @summary Get a sentence by ID
     * @param {number} sentenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentencesApi
     */
    public getSentenceById(sentenceId: number, options?: RawAxiosRequestConfig) {
        return SentencesApiFp(this.configuration).getSentenceById(sentenceId, options).then((request) => request(this.axios, this.basePath));
    }
}



